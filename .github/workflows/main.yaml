name: Terraform CI/CD

on:
  push:
    branches:
      - dev-branch

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

jobs:
  terra-iac:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1
      - name: Format Terraform code
        working-directory: ./
        run: terraform fmt

  plan:
    runs-on: ubuntu-latest
    needs: terra-iac
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
      - name: Terraform init
        working-directory: ./
        run: terraform init
      - name: Terraform Plan
        working-directory: ./
        run: terraform plan -out=PLAN

  apply:
    needs: plan
    outputs:
      SERVER_PUBLIC_IP: ${{ steps.get_public_ip.outputs.public_ip }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
      - name: Terraform init
        working-directory: ./
        run: terraform init
      - name: Terraform Apply
        working-directory: ./
        run: terraform apply -auto-approve  
      - name: Get Public IP
        id: get_public_ip
        run: |
          PUBLIC_IP=$(aws ec2 describe-instances --query "Reservations[].Instances[].PublicIpAddress" --output text)
          echo "Public IP: $PUBLIC_IP"
          echo "::set-output name=public_ip::$PUBLIC_IP" 

  deploy-server:
    needs: apply
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set IP env variable
        run: |
          echo SERVER_PUBLIC_IP=${{ needs.apply.outputs.SERVER_PUBLIC_IP }} >> $GITHUB_ENV 
      - name: SSH to server for deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            sudo apt update 
            sudo apt install git -y
            echo "--INSTALL NVM TO USE A SPECIFIC NODE VERSION--"
            sudo apt install curl -y
            sudo curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" 
            [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
            nvm install 18
            echo "-----PM2------"
            sudo npm install -g pm2
            sudo pm2 startup systemd
            echo "-----NGINX------"
            sudo apt install nginx -y
            echo "---FIREWALL---"
            sudo ufw allow OpenSSH
            sudo ufw allow 'Nginx Full'
            sudo ufw --force enable
            cd /home/ubuntu
            sudo rm -rf MERN-store || true
            git clone https://github.com/eabrahym75/MERN-store.git 
            cd MERN-store/
            cd backend/ 
            npm install 
            sudo rm /etc/nginx/sites-available/default
            sudo cp default /etc/nginx/sites-available/ -r 
            sudo pm2 kill
            pm2 start server.js
            sudo systemctl restart nginx
            cd ../frontend/ 
            npm install 
            rm -rf build
            npm run build
            sudo pm2 delete react-build || true
            pm2 serve build/ 3000 -f --name "react-build" --spa
            sudo rm -rf /etc/nginx/sites-available/default
            sudo cp default /etc/nginx/sites-available/ -r
            sudo systemctl restart nginx 
            cd ../socket/ 
            npm install 
            pm2 start index.js --name "socket" 
            sudo nginx -t 
            sudo systemctl restart nginx
