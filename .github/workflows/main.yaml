name: Terraform CI/CD

on:
  push:
    branches:
      - dev-branch

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

jobs:
  terra-iac:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1
      - name: Format Terraform code
        working-directory: ./
        run: terraform fmt

  plan:
    runs-on: ubuntu-latest
    needs: terra-iac
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
      - name: Terraform init
        working-directory: ./
        run: terraform init
      - name: Terraform Plan
        working-directory: ./
        run: terraform plan -out=PLAN

  apply:
    needs: plan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
      - name: Terraform init
        working-directory: ./
        run: terraform init
      - name: Terraform Apply
        working-directory: ./
        run: terraform apply -auto-approve  
      - name: Get Public IP
        id: get_public_ip
        run: |
          PUBLIC_IP=$(aws ec2 describe-instances --query "Reservations[].Instances[].PublicIpAddress" --output text)
          echo "Public IP: $PUBLIC_IP"
          echo "::set-output name=public_ip::$PUBLIC_IP" 

  deploy-server:
    needs: apply
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set IP env variable
        run:  |-
          echo get_public_ip=${{ needs.apply.outputs.get_public_ip }} >> $GITHUB_ENV
      - name: SSH to server for deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.get_public_ip }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/ubuntu \
            && git clone https://github.com/eabrahym75/MERN-store.git \
            && cd MERN-store/backend/ \
            && npm install \
            && pm2 start server.js \
            && cd ../frontend/ \
            && npm install \
            && npm run build \
            && pm2 serve build/ 3000 --name "frontend" --spa \
            && cd ../socket/ \
            && npm install \
            && pm2 start index.js --name "socket" \
            && cd ../backend/ \
            && sudo tee /etc/nginx/sites-available/myapp.conf > /dev/null <<EOF
            server {
                listen 80 default_server;
                server_name _;  # Replace with your actual domain or IP address

                location / {
                    proxy_pass http://localhost:3000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host \$host;
                    proxy_cache_bypass \$http_upgrade;
                }

                location /socket.io/ {
                    proxy_pass http://localhost:4000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host \$host;
                    proxy_cache_bypass \$http_upgrade;
                }
            }
            EOF
            && sudo rm -f /etc/nginx/sites-enabled/default \
            && sudo ln -s /etc/nginx/sites-available/myapp.conf /etc/nginx/sites-enabled/ \
            && sudo nginx -t \
            && sudo systemctl restart nginx
